public class SelfAvoidingWalker {
    public static void main(String[] args) {
        int N = Integer.parseInt(args[0]); // Размер матрицы
        int trials = Integer.parseInt(args[1]); // Количество экспериментов
        int deadEnds = 0; // Количество тупиковых исходов
        for (int t = 0; t < trials; t++) {
            // Новая матрица, размером N на N. Исходное значение false.
            boolean[][] a = new boolean[N][N];
            // a[i][j] - false если собака не посещала ичейку
            // a[i][j] - true если собака посетила ячейку
            int x = N / 2, y = N / 2; // Находим центр матрицы. Общую длину / ширину делим на 2.
            // Проверка на то, что мы находимся в матрице - от 0 ДО границ матрицы. Но не на грани матрицы!
            // Поэтому N - 1.
            // Пока true - код работает
            while (x > 0 && x < N - 1 && y > 0 && y < N - 1) {
                // Проверка на то, что собака была сверху, снизу, слева и справа.
                // Тупиковая ситуация будет если все 4 условия - true.
                if (a[x - 1][y] && a[x + 1][y] && a[x][y - 1] && a[x][y + 1]) {
                    deadEnds++; // Увеличиваем счетчик тупиковых исходов
                    break; // Прервать цикл и выйти
                }
                // Если Хоть один из условий сверху false,
                // Тогда я записываю в матрицу а true, т.е. посещаю её
                a[x][y] = true;
                // Бросаю монетку, чтобы узнать куда шагать дальше
                double r = Math.random();
                // [0, 0.25) + [0.25, 0.5) + [0.5, 0.75) + [0.75, 1)
                // Если true, значит иду вправо.
                if (r < 0.25) {
                    if (!a[x + 1][y]) x++; // Внутри if - проверка посещал ли я эту ячейку?
                }
                else if (r < 0.50) {
                    if (!a[x - 1][y]) x--;
                }
                else if (r < 0.75) {
                    if (!a[x][y + 1]) y++;
                }
                else if (r < 1.0) {
                    if (!a[x][y - 1]) y--;
                }
            }
        }
        // Печатаем процент тупиковых исходов
        System.out.println(100 * deadEnds / trials + "% dead ends");
    }
}
